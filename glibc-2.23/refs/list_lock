<def f='codebrowser/malloc/arena.c' l='92' type='mutex_t'/>
<use f='codebrowser/malloc/arena.c' l='179' u='a' c='malloc_atfork'/>
<use f='codebrowser/malloc/arena.c' l='179' u='a' c='malloc_atfork'/>
<use f='codebrowser/malloc/arena.c' l='179' u='a' c='malloc_atfork'/>
<use f='codebrowser/malloc/arena.c' l='179' u='a' c='malloc_atfork'/>
<use f='codebrowser/malloc/arena.c' l='180' u='a' c='malloc_atfork'/>
<use f='codebrowser/malloc/arena.c' l='180' u='a' c='malloc_atfork'/>
<use f='codebrowser/malloc/arena.c' l='180' u='a' c='malloc_atfork'/>
<use f='codebrowser/malloc/arena.c' l='180' u='a' c='malloc_atfork'/>
<use f='codebrowser/malloc/arena.c' l='227' u='a' c='ptmalloc_lock_all'/>
<use f='codebrowser/malloc/arena.c' l='227' u='a' c='ptmalloc_lock_all'/>
<use f='codebrowser/malloc/arena.c' l='235' u='a' c='ptmalloc_lock_all'/>
<use f='codebrowser/malloc/arena.c' l='235' u='a' c='ptmalloc_lock_all'/>
<use f='codebrowser/malloc/arena.c' l='235' u='a' c='ptmalloc_lock_all'/>
<use f='codebrowser/malloc/arena.c' l='235' u='a' c='ptmalloc_lock_all'/>
<use f='codebrowser/malloc/arena.c' l='282' u='a' c='ptmalloc_unlock_all'/>
<use f='codebrowser/malloc/arena.c' l='282' u='a' c='ptmalloc_unlock_all'/>
<use f='codebrowser/malloc/arena.c' l='282' u='a' c='ptmalloc_unlock_all'/>
<use f='codebrowser/malloc/arena.c' l='282' u='a' c='ptmalloc_unlock_all'/>
<use f='codebrowser/malloc/arena.c' l='325' u='a' c='ptmalloc_unlock_all2'/>
<use f='codebrowser/malloc/arena.c' l='811' u='a' c='_int_new_arena'/>
<use f='codebrowser/malloc/arena.c' l='811' u='a' c='_int_new_arena'/>
<use f='codebrowser/malloc/arena.c' l='811' u='a' c='_int_new_arena'/>
<use f='codebrowser/malloc/arena.c' l='811' u='a' c='_int_new_arena'/>
<use f='codebrowser/malloc/arena.c' l='821' u='a' c='_int_new_arena'/>
<use f='codebrowser/malloc/arena.c' l='821' u='a' c='_int_new_arena'/>
<use f='codebrowser/malloc/arena.c' l='821' u='a' c='_int_new_arena'/>
<use f='codebrowser/malloc/arena.c' l='821' u='a' c='_int_new_arena'/>
<doc f='codebrowser/malloc/arena.c' l='80'>/* list_lock prevents concurrent writes to the next member of struct
   malloc_state objects.

   Read access to the next member is supposed to synchronize with the
   atomic_write_barrier and the write to the next member in
   _int_new_arena.  This suffers from data races; see the FIXME
   comments in _int_new_arena and reused_arena.

   list_lock also prevents concurrent forks.  At the time list_lock is
   acquired, no arena lock must have been acquired, but it is
   permitted to acquire arena locks subsequently, while list_lock is
   acquired.  */</doc>
