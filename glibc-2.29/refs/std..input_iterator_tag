<def f='include/c++/11/bits/stl_iterator_base_types.h' l='93'/>
<ovr f='include/c++/11/bits/stl_iterator_base_types.h' l='99' c='std::forward_iterator_tag'/>
<use f='include/c++/11/bits/stl_iterator_base_types.h' l='99'/>
<use f='include/c++/11/bits/stl_iterator_base_funcs.h' l='81' c='_ZSt10__distanceT_S_St18input_iterator_tag'/>
<use f='include/c++/11/bits/stl_iterator_base_funcs.h' l='113' c='_ZSt10__distanceSt14_List_iteratorIT_ES1_St18input_iterator_tag'/>
<use f='include/c++/11/bits/stl_iterator_base_funcs.h' l='119' c='_ZSt10__distanceSt20_List_const_iteratorIT_ES1_St18input_iterator_tag'/>
<use f='include/c++/11/bits/stl_iterator_base_funcs.h' l='147' c='_ZSt9__advanceRT_T0_St18input_iterator_tag'/>
<use f='include/c++/11/bits/stl_algobase.h' l='1080' c='_ZSt10__fill_n_aRKN11__gnu_debug14_Safe_iteratorIT_T0_T1_EET2_RKT3_St18input_iterator_tag'/>
<use f='include/c++/11/bits/stl_algobase.h' l='1098' c='_ZSt10__fill_n_aT_T0_RKT1_St18input_iterator_tag'/>
<use f='include/c++/11/bits/stl_algobase.h' l='2050' c='_ZSt9__find_ifT_S_T0_St18input_iterator_tag'/>
<use f='include/c++/11/bits/basic_string.h' l='281' c='_ZNSt7__cxx1112basic_string12_M_constructETL0__S1_St18input_iterator_tag'/>
<use f='include/c++/11/bits/basic_string.tcc' l='165' c='_ZNSt7__cxx1112basic_string12_M_constructETL0__S1_St18input_iterator_tag'/>
<use f='include/c++/11/bits/streambuf_iterator.h' l='51'/>
<size>1</size>
<doc f='include/c++/11/bits/stl_iterator_base_types.h' l='84'>/**
   *  @defgroup iterator_tags Iterator Tags
   *  These are empty types, used to distinguish different iterators.  The
   *  distinction is not made by what they contain, but simply by what they
   *  are.  Different underlying algorithms can then be used based on the
   *  different operations supported by different iterator types.
  */
  ///@{
  ///  Marking input iterators.</doc>
