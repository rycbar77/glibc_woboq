<def f='include/c++/11/bits/exception.h' l='61' ll='77'/>
<use f='include/c++/11/bits/exception.h' l='67' c='_ZNSt9exceptionC1ERKS_'/>
<use f='include/c++/11/bits/exception.h' l='68' c='_ZNSt9exceptionaSERKS_'/>
<use f='include/c++/11/bits/exception.h' l='68' c='_ZNSt9exceptionaSERKS_'/>
<use f='include/c++/11/bits/exception.h' l='69' c='_ZNSt9exceptionC1EOS_'/>
<use f='include/c++/11/bits/exception.h' l='70' c='_ZNSt9exceptionaSEOS_'/>
<use f='include/c++/11/bits/exception.h' l='70' c='_ZNSt9exceptionaSEOS_'/>
<ovr f='include/c++/11/exception' l='53' c='std::bad_exception'/>
<use f='include/c++/11/exception' l='53'/>
<ovr f='include/c++/11/typeinfo' l='190' c='std::bad_cast'/>
<use f='include/c++/11/typeinfo' l='190'/>
<ovr f='include/c++/11/typeinfo' l='207' c='std::bad_typeid'/>
<use f='include/c++/11/typeinfo' l='207'/>
<ovr f='include/c++/11/new' l='55' c='std::bad_alloc'/>
<use f='include/c++/11/new' l='55'/>
<ovr f='include/c++/11/stdexcept' l='113' c='std::logic_error'/>
<use f='include/c++/11/stdexcept' l='113'/>
<ovr f='include/c++/11/stdexcept' l='219' c='std::runtime_error'/>
<use f='include/c++/11/stdexcept' l='219'/>
<size>8</size>
<doc f='include/c++/11/bits/exception.h' l='53'>/**
   *  @brief Base class for all library exceptions.
   *
   *  This is the base class for all exceptions thrown by the standard
   *  library, and by certain language expressions.  You are free to derive
   *  your own %exception classes, or use a different hierarchy, or to
   *  throw non-class data (e.g., fundamental types).
   */</doc>
<fun r='_ZNSt9exceptionC1Ev'/>
<fun r='_ZNSt9exceptionD1Ev'/>
<fun r='_ZNSt9exceptionC1ERKS_'/>
<fun r='_ZNSt9exceptionaSERKS_'/>
<fun r='_ZNSt9exceptionC1EOS_'/>
<fun r='_ZNSt9exceptionaSEOS_'/>
<fun r='_ZNKSt9exception4whatEv'/>
