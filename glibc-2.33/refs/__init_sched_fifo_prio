<dec f='codebrowser/nptl/pthreadP.h' l='233' type='void __init_sched_fifo_prio()'/>
<use f='codebrowser/nptl/pthread_mutex_init.c' l='121' u='c' c='__pthread_mutex_init'/>
<use f='codebrowser/nptl/pthread_mutex_setprioceiling.c' l='40' u='c' c='pthread_mutex_setprioceiling'/>
<use f='codebrowser/nptl/pthread_mutexattr_getprioceiling.c' l='40' u='c' c='pthread_mutexattr_getprioceiling'/>
<use f='codebrowser/nptl/pthread_mutexattr_setprioceiling.c' l='31' u='c' c='pthread_mutexattr_setprioceiling'/>
<def f='codebrowser/nptl/tpp.c' l='42' ll='49' type='void __init_sched_fifo_prio()'/>
<use f='codebrowser/nptl/tpp.c' l='67' u='c' c='__pthread_tpp_change_priority'/>
<doc f='codebrowser/nptl/tpp.c' l='32'>/* We only want to initialize __sched_fifo_min_prio and __sched_fifo_max_prio
   once.  The standard solution would be similar to pthread_once, but then
   readers would need to use an acquire fence.  In this specific case,
   initialization is comprised of just idempotent writes to two variables
   that have an initial value of -1.  Therefore, we can treat each variable as
   a separate, at-least-once initialized value.  This enables using just
   relaxed MO loads and stores, but requires that consumers check for
   initialization of each value that is to be used; see
   __pthread_tpp_change_priority for an example.
 */</doc>
