<dec f='codebrowser/malloc/malloc.c' l='790' type='size_t __malloc_usable_size(void * )'/>
<def f='codebrowser/malloc/malloc.c' l='5114' ll='5121' type='size_t __malloc_usable_size(void * m)'/>
<use f='codebrowser/malloc/malloc.c' l='5877' c='malloc_usable_size'/>
<doc f='codebrowser/malloc/malloc.c' l='775'>/*
  malloc_usable_size(void* p);

  Returns the number of bytes you can actually use in
  an allocated chunk, which may be more than you requested (although
  often not) due to alignment and minimum size constraints.
  You can use this many bytes without worrying about
  overwriting other allocated objects. This is not a particularly great
  programming practice. malloc_usable_size can be more useful in
  debugging and assertions, for example:

  p = malloc(n);
  assert(malloc_usable_size(p) &gt;= 256);

*/</doc>
