<dec f='codebrowser/nptl/pthreadP.h' l='447' type='int __pthread_cond_destroy(pthread_cond_t * cond)'/>
<dec f='codebrowser/nptl/pthreadP.h' l='448' type='int __pthread_cond_destroy(pthread_cond_t * )'/>
<use f='codebrowser/nptl/pthreadP.h' l='448' c='__pthread_cond_destroy'/>
<def f='codebrowser/nptl/pthread_cond_destroy.c' l='41' ll='60' type='int __pthread_cond_destroy(pthread_cond_t * cond)'/>
<use f='codebrowser/nptl/pthread_cond_destroy.c' l='62' c='pthread_cond_destroy'/>
<doc f='codebrowser/nptl/pthread_cond_destroy.c' l='28'>/* See __pthread_cond_wait for a high-level description of the algorithm.

   A correct program must make sure that no waiters are blocked on the condvar
   when it is destroyed, and that there are no concurrent signals or
   broadcasts.  To wake waiters reliably, the program must signal or
   broadcast while holding the mutex or after having held the mutex.  It must
   also ensure that no signal or broadcast are still pending to unblock
   waiters; IOW, because waiters can wake up spuriously, the program must
   effectively ensure that destruction happens after the execution of those
   signal or broadcast calls.
   Thus, we can assume that all waiters that are still accessing the condvar
   have been woken.  We wait until they have confirmed to have woken up by
   decrementing __wrefs.  */</doc>
<use f='codebrowser/sysdeps/pthread/cnd_destroy.c' l='25' u='c' c='cnd_destroy'/>
