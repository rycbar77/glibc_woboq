<dec f='codebrowser/sysdeps/nptl/lowlevellock.h' l='191' type='int __lll_lock_elision(int * futex, short * adapt_count, int private)'/>
<dec f='codebrowser/sysdeps/nptl/lowlevellock.h' l='192' type='int __lll_lock_elision(int * , short * , int )'/>
<use f='codebrowser/sysdeps/nptl/lowlevellock.h' l='192' c='__lll_lock_elision'/>
<def f='codebrowser/sysdeps/unix/sysv/linux/x86/elision-lock.c' l='38' ll='101' type='int __lll_lock_elision(int * futex, short * adapt_count, int private)'/>
<doc f='codebrowser/sysdeps/unix/sysv/linux/x86/elision-lock.c' l='34'>/* Adaptive lock using transactions.
   By default the lock region is run as a transaction, and when it
   aborts or the lock is busy the lock adapts itself.  */</doc>
