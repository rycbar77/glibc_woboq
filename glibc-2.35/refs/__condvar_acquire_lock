<def f='codebrowser/nptl/pthread_cond_common.c' l='113' ll='145' type='void __condvar_acquire_lock(pthread_cond_t * cond, int private)'/>
<use f='codebrowser/nptl/pthread_cond_broadcast.c' l='47' u='c' c='___pthread_cond_broadcast'/>
<doc f='codebrowser/nptl/pthread_cond_common.c' l='108'>/* The lock that signalers use.  See pthread_cond_wait_common for uses.
   The lock is our normal three-state lock: not acquired (0) / acquired (1) /
   acquired-with-futex_wake-request (2).  However, we need to preserve the
   other bits in the unsigned int used for the lock, and therefore it is a
   little more complex.  */</doc>
<use f='codebrowser/nptl/pthread_cond_signal.c' l='46' u='c' c='___pthread_cond_signal'/>
<use f='codebrowser/nptl/pthread_cond_wait.c' l='85' u='c' c='__condvar_cancel_waiting'/>
