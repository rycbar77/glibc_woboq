<dec f='codebrowser/stdlib/stdlib.h' l='98' type='size_t __ctype_get_mb_cur_max()'/>
<def f='codebrowser/locale/broken_cur_max.c' l='42' ll='49' type='size_t __ctype_get_mb_cur_max()'/>
<doc f='codebrowser/locale/broken_cur_max.c' l='26'>/* This is a gross hack to get broken programs running.

   ISO C provides no mean to find out how many bytes the wide
   character representation really uses.  But it defines MB_CUR_LEN to
   return the information for the multi-byte character representation.
   Many programmers don&apos;t know the difference between the two and
   think this means the same.  But assuming all characters have a size
   of MB_CUR_LEN after they have been processed by `mbrtowc&apos; is wrong.
   Instead the maximum number of characters used for the conversion is
   MB_CUR_LEN.

   It is known that some Motif applications have this problem.  To
   cure this one has to make sure the glibc uses the function in this
   file instead of the one in locale/mb_cur_max.c.  This can either be
   done by linking with this file or by using the LD_PRELOAD feature
   of the dynamic linker.  */</doc>
<def f='codebrowser/locale/mb_cur_max.c' l='26' ll='31' type='size_t __ctype_get_mb_cur_max()'/>
