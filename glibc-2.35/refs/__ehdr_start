<dec f='codebrowser/sysdeps/x86_64/dl-machine.h' l='44' type='const Elf64_Ehdr'/>
<use f='codebrowser/sysdeps/x86_64/dl-machine.h' l='45' u='a' c='elf_machine_load_address'/>
<dec f='codebrowser/elf/rtld.c' l='1757' type='const Elf64_Ehdr'/>
<use f='codebrowser/elf/rtld.c' l='1761' u='a' c='dl_main'/>
<doc f='codebrowser/elf/rtld.c' l='1752'>/* Starting from binutils-2.23, the linker will define the magic symbol
     __ehdr_start to point to our own ELF header if it is visible in a
     segment that also includes the phdrs.  If that&apos;s not available, we use
     the old method that assumes the beginning of the file is part of the
     lowest-addressed PT_LOAD segment.  */</doc>
<dec f='codebrowser/csu/libc-start.c' l='274' type='const Elf64_Ehdr'/>
<use f='codebrowser/csu/libc-start.c' l='282' u='m' c='__libc_start_main_impl'/>
<use f='codebrowser/csu/libc-start.c' l='282' u='m' c='__libc_start_main_impl'/>
<use f='codebrowser/csu/libc-start.c' l='283' u='a' c='__libc_start_main_impl'/>
<use f='codebrowser/csu/libc-start.c' l='283' u='m' c='__libc_start_main_impl'/>
<use f='codebrowser/csu/libc-start.c' l='284' u='m' c='__libc_start_main_impl'/>
<doc f='codebrowser/csu/libc-start.c' l='268'>/* Starting from binutils-2.23, the linker will define the
         magic symbol __ehdr_start to point to our own ELF header
         if it is visible in a segment that also includes the phdrs.
         So we can set up _dl_phdr and _dl_phnum even without any
         information from auxv.  */</doc>
