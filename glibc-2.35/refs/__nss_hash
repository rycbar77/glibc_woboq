<dec f='codebrowser/include/nss.h' l='19' type='uint32_t __nss_hash(const void * __key, size_t __length)'/>
<doc f='codebrowser/include/nss.h' l='17'>/* Compute a hash value for LENGTH bytes starting at KEY.  This is the
   hash function used by the nscd for the cache mapping files.  */</doc>
<use f='codebrowser/nis/nis_hash.c' l='28' u='c' c='__nis_hash'/>
<use f='codebrowser/nscd/cache.c' l='76' u='c' c='cache_search'/>
<use f='codebrowser/nscd/cache.c' l='155' u='c' c='cache_add'/>
<use f='codebrowser/nscd/nscd_helper.c' l='453' u='c' c='__nscd_cache_search'/>
<def f='codebrowser/nss/nss_hash.c' l='30' ll='76' type='uint32_t __nss_hash(const void * keyarg, size_t len)'/>
<doc f='codebrowser/nss/nss_hash.c' l='21'>/*
 * This is INCREDIBLY ugly, but fast.  We break the string up into 8 byte
 * units.  On the first time through the loop we get the &quot;leftover bytes&quot;
 * (strlen % 8).  On every other iteration, we perform 8 HASHC&apos;s so we handle
 * all 8 bytes.  Essentially, this saves us 7 cmp &amp; branch instructions.  If
 * this routine is heavily used enough, it&apos;s worth the ugly coding.
 *
 * OZ&apos;s original sdbm hash
 */</doc>
