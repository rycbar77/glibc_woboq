<dec f='codebrowser/include/regex.h' l='32' type='void __re_set_registers(struct re_pattern_buffer * buffer, struct re_registers * regs, unsigned int num_regs, regoff_t * starts, regoff_t * ends)'/>
<def f='codebrowser/posix/regexec.c' l='538' macro='1' type='void __re_set_registers(struct re_pattern_buffer * bufp, struct re_registers * regs, __re_size_t num_regs, regoff_t * starts, regoff_t * ends)'/>
<use f='codebrowser/posix/regexec.c' l='556' c='re_set_registers'/>
<doc f='codebrowser/posix/regexec.c' l='524'>/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
   this memory for recording register information.  STARTS and ENDS
   must be allocated using the malloc library routine, and must each
   be at least NUM_REGS * sizeof (regoff_t) bytes long.

   If NUM_REGS == 0, then subsequent matches should allocate their own
   register data.

   Unless this function is called, the first search or match using
   PATTERN_BUFFER will allocate its own register data, without
   freeing the old data.  */</doc>
